<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
    http://www.springframework.org/schema/security
    http://www.springframework.org/schema/security/spring-security-3.1.xsd">

<!-- 	<http pattern="/application/views/core/header.jsp" security="none"/>
	<http pattern="/application/views/core/indexContent.jsp" security="none"/>
	<http pattern="/application/views/core/leftMenu.jsp" security="none"/>
	<http pattern="/application/views/core/login.jsp" security="none"/>
	<http pattern="/application/views/common/*.jsp" security="none"/>
	<http pattern="/403.jsp" security="none" /> -->
	<http pattern="/application/views/core/login.jsp" security="none"/>
	<http pattern="/**/*.jpg" security="none" />
	<http pattern="/**/*.png" security="none" />
	<http pattern="/**/*.gif" security="none" />
	<http pattern="/**/*.css" security="none" />
	<http pattern="/**/*.js" security="none" />   
	<http pattern="/**/*.ico" security="none" />
	<!-- <http>标签不能配置auto-config，因为这样配置后，依然会采用Spring Security的Filter Chain会与下面我们配的custom-filter冲突 -->
	<http entry-point-ref="authenticationProcessingFilterEntryPoint"> 
	
		  <logout logout-success-url="/application/views/core/login.jsp" logout-url="/logout.jsp" invalidate-session="true" delete-cookies="SPRING_SECURITY_REMEMBER_ME_COOKIE"/>
		  
		  <!-- 处理ajax请求 -->
          <access-denied-handler ref="accessDeniedHandler"/>
		  
		  <remember-me key="SpringSecurityCookiesIframework"/>
  			
          <custom-filter  position="FORM_LOGIN_FILTER"  ref="loginFilter"/>
          <custom-filter position="CONCURRENT_SESSION_FILTER" ref="concurrencyFilter" />
          <custom-filter before="FILTER_SECURITY_INTERCEPTOR"  ref="securityFilter" />
          <custom-filter after="FILTER_SECURITY_INTERCEPTOR"  ref="MySessionHandleFilter" />
          <session-management  session-authentication-strategy-ref="sessionAuthenticationStrategy" />
	</http>
	
	<beans:bean id="accessDeniedHandler"   class="com.core.security.filter.MyAccessDeniedHandlerImpl">
		<beans:property name="accessDeniedUrl" value="403.jsp" />  
  	</beans:bean>  
	
	<!-- 登录验证器 -->
	<beans:bean id="loginFilter"  
        class="com.core.security.filter.MyUsernamePasswordAuthenticationFilter">
        <!-- 处理登录的action -->  
        <beans:property name="filterProcessesUrl" value="/application/views/core/j_spring_security_check"></beans:property>
         <!-- 验证成功后的处理-->  
        <beans:property name="authenticationSuccessHandler" ref="loginLogAuthenticationSuccessHandler"></beans:property>  
        <!-- 验证失败后的处理-->  
        <beans:property name="authenticationFailureHandler" ref="simpleUrlAuthenticationFailureHandler"></beans:property>
        <!-- 用户拥有的权限 -->  
        <beans:property name="authenticationManager" ref="myAuthenticationManager"></beans:property>  
        <!-- 注入DAO为了查询相应的用户 -->  
        <beans:property name="authService" ref="authService"></beans:property>  
        <!--提供cookie记录用户功能 -->  
        <beans:property name="rememberMeServices" ref="rememberMeServices"></beans:property>  
        <!--提供session控制功能 -->  
        <beans:property name="sessionAuthenticationStrategy" ref="sessionAuthenticationStrategy"></beans:property>  
        <!--得到用户登录信息等 -->  
        <beans:property name="sessionRegistry" ref="sessionRegistry"></beans:property>  
    </beans:bean>
    
	<beans:bean id="loginLogAuthenticationSuccessHandler"  
        class="org.springframework.security.web.authentication.SavedRequestAwareAuthenticationSuccessHandler">  
        <beans:property name="defaultTargetUrl" value="/application/views/core/main.jsp"></beans:property>
    </beans:bean>  
    <beans:bean id="simpleUrlAuthenticationFailureHandler"  
        class="org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler">  
        <!-- 可以配置相应的跳转方式。属性forwardToDestination为true采用forward false为sendRedirect -->  
        <beans:property name="defaultFailureUrl" value="/application/views/core/login.jsp"></beans:property>
    </beans:bean>  
	

	<!-- 认证过滤器 -->
     <beans:bean id="securityFilter" class="com.core.security.filter.MyFilterSecurityInterceptor">
        <!-- 用户拥有的权限 -->
        <beans:property name="authenticationManager"  ref="myAuthenticationManager" />  
        <!-- 用户是否拥有所请求资源的权限 --> 
        <beans:property name="accessDecisionManager"  ref="myAccessDecisionManagerBean" />  
        <!-- 资源与权限对应关系 --> 
        <beans:property name="securityMetadataSource"  ref="securityMetadataSource" />  
    </beans:bean>  
      
    <!-- 认证管理器，实现用户认证的入口，主要实现UserDetailsService接口 -->  
    <authentication-manager alias="myAuthenticationManager" erase-credentials="false">  
        <authentication-provider  
            user-service-ref="myUserDetailServiceImpl">  
            <!--如果用户的密码采用加密的话，可以加点“盐”-->
            <password-encoder hash="md5" >
            	<salt-source user-property="username"/>
            </password-encoder>
        </authentication-provider>  
    </authentication-manager>

    <beans:bean id="myUserDetailServiceImpl"   class="com.core.security.service.impl.MyUserDetailServiceImpl" >
    	<beans:property name="userMapper" ref="userMapper"/>     
    	<beans:property name="userRoleMapper" ref="userRoleMapper"/>  
    	<beans:property name="departmentMapper" ref="departmentMapper"/> 
    	<beans:property name="userInfoMapper" ref="userInfoMapper"/> 
    </beans:bean>  
  
    <!-- 访问决策器，决定某个用户具有的角色，是否有足够的权限去访问某个资源 -->  
    <beans:bean id="myAccessDecisionManagerBean"  
         class="com.core.security.filter.MyAccessDecisionManager">
    </beans:bean>  
      
    <!-- 资源源数据定义，即定义某一资源可以被哪些角色访问 -->  
    <beans:bean id="securityMetadataSource"   class="com.core.security.filter.MyInvocationSecurityMetadataSource" >
	    	 <beans:constructor-arg><beans:ref bean="privilegeMapper"/></beans:constructor-arg>  
			 <beans:constructor-arg><beans:ref bean="roleMapper"/></beans:constructor-arg> 
     </beans:bean>  
  
    <!-- 未登录的切入点 -->  
    <beans:bean id="authenticationProcessingFilterEntryPoint" class="org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint">  
        <beans:property name="loginFormUrl" value="/application/views/core/login.jsp"></beans:property>
    </beans:bean>  
    
    <beans:bean id="authService" class="com.core.security.service.impl.AuthServiceImpl">
    	<beans:property name="userMapper" ref="userMapper"></beans:property>  
    </beans:bean>

 	<!-- Remember me Configuration start  -->
	 <beans:bean id="rememberMeServices"
	  class="org.springframework.security.web.authentication.rememberme.TokenBasedRememberMeServices">
		  <beans:property name="userDetailsService" ref="myUserDetailServiceImpl" />
		  <beans:property name="key" value="SpringSecurityCookiesIframework" />
		  <beans:property name="alwaysRemember" value="true"></beans:property>
		  <beans:property name="tokenValiditySeconds" value="86400"></beans:property>
		  <!-- <beans:property name="parameter" value="_spring_security_remember_me"></beans:property> -->
	 </beans:bean>
	 <!-- Session Configuration start  -->
	 <beans:bean id="sessionAuthenticationStrategy"
		class="org.springframework.security.web.authentication.session.ConcurrentSessionControlStrategy">
		<beans:constructor-arg name="sessionRegistry" ref="sessionRegistry" />
		<beans:property name="maximumSessions" value="1" />
		<beans:property name="exceptionIfMaximumExceeded" value="false" />
	</beans:bean>
	<!-- Session Configuration start  -->
	<beans:bean id="sessionRegistry" class="org.springframework.security.core.session.SessionRegistryImpl" />
	<!-- Session Configuration start-->
	<beans:bean id="concurrencyFilter" class="org.springframework.security.web.session.ConcurrentSessionFilter">
		<beans:property name="sessionRegistry" ref="sessionRegistry" />
		<beans:property name="expiredUrl" value="/401.jsp" />
	</beans:bean> 
	
	<beans:bean id="MySessionHandleFilter" class="com.core.security.filter.MySessionHandleFilter">
		<beans:property name="securityMetadataSource" ref="securityMetadataSource"></beans:property>  
	</beans:bean>

</beans:beans>